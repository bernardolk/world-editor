#version 330 core

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

out vec4 FragColor;

struct DirLight{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float constant;
	float linear;
	float quadratic;
};

struct SpotLight{
	vec3 position;
	vec3 direction;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float innercone;
	float outercone;

	float constant;
	float linear;
	float quadratic;
};

#define MAX_POINT_LIGHT_SOURCES 32
#define MAX_SPOT_LIGHT_SOURCES 32
#define MAX_DIRECTIONAL_LIGHT_SOURCES 32

uniform DirLight dirLights[MAX_DIRECTIONAL_LIGHT_SOURCES];
uniform PointLight pointLights[MAX_POINT_LIGHT_SOURCES];
uniform SpotLight spotLights[MAX_SPOT_LIGHT_SOURCES];

uniform int num_directional_lights;
uniform int num_point_lights;
uniform int num_spot_lights;

uniform float shininess;
uniform vec3 viewPos;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_diffuse2;
uniform sampler2D texture_diffuse3;
uniform sampler2D texture_specular1;
uniform sampler2D texture_specular2;


vec3 norm;
vec3 difTex;
vec3 specTex;

vec3 calcDirectionalLight(DirLight dirLight){
	vec3 lightDirection = normalize(dirLight.direction);
	
	// Ambient
	vec3 ambient = difTex * dirLight.ambient; 
	
	// Diffuse
	float diff_cos = max(dot(-lightDirection, norm), 0.0);
	vec3 diffuse = diff_cos * dirLight.diffuse * difTex;
	
	// Specular
	vec3 specular_reflection = reflect(lightDirection, norm);
	vec3 fragToView = normalize(viewPos - FragPos);
	float spec = pow(max(dot(fragToView, specular_reflection), 0.0), shininess);
	vec3 specular = spec * dirLight.specular * specTex;
	
	vec3 result = ambient + diffuse + specular;
	return result;
}

vec3 calcPointLight(PointLight pointLight){	
	vec3 lightToFrag = normalize(FragPos - pointLight.position);
	float distance = length(FragPos - pointLight.position);
	
	// Ambient
	vec3 ambient = difTex * pointLight.ambient; 
	
	// Diffuse
	float diff_cos = max(dot(-lightToFrag, norm), 0.0);
	vec3 diffuse = diff_cos * pointLight.diffuse * difTex;
	
	// Specular
	vec3 specular_reflection = reflect(lightToFrag, norm);
	vec3 fragToView = normalize(viewPos - FragPos);
	float spec = pow(max(dot(fragToView, specular_reflection), 0.0), shininess);
	vec3 specular = spec * pointLight.specular * specTex;
	
	// Decay	
	float decay = 1 / (pointLight.constant + pointLight.linear * distance + pointLight.quadratic * (distance * distance));
	vec3 result = (ambient + diffuse + specular) * decay;
	return result;
}


vec3 calcSpotLight(SpotLight spotlight){
	//vec3 norm = normalize(Normal);
	vec3 lightToFragDir = normalize(FragPos - spotlight.position); // From fragment position to light
	
	// ambient
    vec3 ambient =  difTex * spotlight.ambient;

	// diffuse
    float diff = max(dot(-lightToFragDir, norm), 0.0);		// Dot product of normalized vectors = cosine of angle between vectors. Maximum intensity at parallel (normal and light)
    vec3 diffuse = spotlight.diffuse * diff * difTex;	// Modulate light intensity based on cosine and material
 
	//specular (for each vertex we have a different position in the world, hence, a different light intensity)
	vec3 fragToViewDir =  normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(lightToFragDir, norm);
	float spec = pow(max(dot(fragToViewDir, reflectDir), 0.0), shininess);
	vec3 specular = spotlight.specular * spec * specTex;
 
	 //Decay (attenuation)
 	 float distance = length(spotlight.position - FragPos); 
	 float decay = 1.0 / (spotlight.constant + spotlight.linear * distance + spotlight.quadratic * distance * distance);
	
	// Intensity (light cone suavization towards borders)
	float theta = dot(-lightToFragDir, normalize(-spotlight.direction));
	float epsilon = spotlight.innercone - spotlight.outercone;
	float intensity = clamp((theta - spotlight.outercone) / epsilon, 0.0, 1.0);
 
	// results
    vec3 result = (ambient + diffuse + specular) * intensity * decay;
	return result;
}


void main() {
	difTex = vec3(texture(texture_diffuse1, TexCoords)) + vec3(texture(texture_diffuse2, TexCoords));
	specTex = vec3(texture(texture_specular1, TexCoords)) + vec3(texture(texture_specular2, TexCoords));
	norm = normalize(Normal);
	
	vec3 color = vec3(0.0);
	//for(int i = 0; i < num_directional_lights; i++)
	//	color += calcDirectionalLight(dirLights[i]);
	for(int i = 0; i < num_point_lights; i++)
		color += calcPointLight(pointLights[i]);
	//for(int i = 0; i < num_spot_lights; i++)
	//	color += calcSpotLight(spotLights[i]);
	FragColor = vec4(color,1.0);
}