#version 330 core
out vec4 FragColor;
in vec3 Normal;  
in vec3 FragPos; 
in vec2 TexCoords;

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};	

struct Light {
	vec3 position;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
	 vec3 norm = normalize(Normal);
	 
    // ambient
    vec3 ambient = vec3(texture(material.diffuse, TexCoords)) * light.ambient;
  	
    // diffuse (for a cube, each face has one value {just one normal} )   
    vec3 lightToFragDir = normalize(FragPos - light.position); // From fragment position to light
    float diff = max(dot(-lightToFragDir, norm), 0.0);		// Dot product of normalized vectors = cosine of angle between vectors. Maximum intensity at parallel (normal and light)
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));	// Modulate light intensity based on cosine and material
 
	//specular (for each vertex we have a different position in the world, hence, a different light intensity)
	//float specularStrength = 0.5f;
	vec3 fragToViewDir =  normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(lightToFragDir, norm);
	float spec = pow(max(dot(fragToViewDir, reflectDir),0.0), material.shininess);
	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
 
	//Attenuation (point light source)
 	float distance = length(light.position - FragPos); 
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
 
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
 
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
} 